{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Jquery.easyplug","tagline":"Simplify the creation of jQuery plugin","body":"# Usage\r\nEasyPlug is (until now) a single function attached to the jQuery object.\r\nIt allows you to define a jQuery plugin easily.\r\n\r\n```\r\n$.easyPlug( constructor [, settings ] );\r\n```\r\n## Parameters\r\n### constructor\r\nA function called on instantiation. A plugin instance is created for each element in the set of matched elements.\r\n\r\nThe constructor has four arguments :\r\n\r\n+ **Plugin**: the Plugin object\r\n+ **element**: jQuery object with a single element from the original set of elements\r\n+ **settings**: Merged contents of plugin presets and user options\r\n+ **options**: Original user options\r\n\r\n### settings\r\nAn object of settings providing informations to easyPlug in order to prepare the plugin.\r\n\r\nHere is the list of properties:\r\n\r\n+ **name**: the name of your plugin. If you don't provide a name, an unique one will be generated\r\n+ **presets**: default settings objects. A copy of it, merged with user options, is provided on instantiation.\r\n+ **events**: an array of event name. Event names will be prefixed by easyPlug (e.g. *ready* become *pluginName-ready*)\r\n\r\nNone of this properties is required.\r\n\r\n## Returns\r\n### Plugin object\r\nThe Plugin object. You can, for example, add \"static\" properties and/or methods to it.\r\n\r\n# How it helps ?\r\n## Add to jQuery\r\nEasyPlug attach the plugin controller to the jQuery *fn* property (prototype). The controller instantiate plugin if needed and/or call public method.  \r\nThe controller is called each time you call your plugin:\r\n\r\n```\r\n$( selection ).pluginName();\r\n```\r\n\r\nEasyPlug also attach the Plugin object directly on the jQuery object, acting as \"static\":\r\n\r\n```\r\n$.pluginName;\r\n```\r\n\r\n## Chainability\r\nIf no public method is called or, if the method returns undefined, the controller returns the set of matche elements.  \r\nIf a public method does not return undefined, the value is directly returned.\r\n\r\n```\r\n$( selection ).pluginName().attr( 'foo', 'bar' );\r\n```\r\n\r\n## Public methods\r\n### Declaration\r\nTo declare your public method, you have to add it to the *methods* property in your constructor:\r\n\r\n```\r\n$.easyPlug(function() {\r\n  this.methods.methodName = function( [ argument, … ] ) {\r\n    // instructions\r\n  };\r\n});\r\n```\r\n\r\n### Calling\r\nTo call a public method, all you have to do is to pass its name as first argument:\r\n\r\n```\r\n$( selection ).pluginName( 'methodName' [, argument, … ] );\r\n```\r\n\r\n### Predefined methods\r\nUntil now there is a single predefined method.\r\n\r\n+ **settings**(): returns a copy of the settings object\r\n\r\n\r\n## Custom events\r\nAll custom events are automatically prefixed in order to avoid conflicts between public and standard events.\r\n\r\nCustom events are defined in the *events* property of the Plugin objects.\r\n\r\n```\r\n$.pluginName.events.custom; // pluginName-custom\r\n```\r\n\r\n## \"Static\" public methods\r\n###Declaration\r\nTo declare your static public method, you have to add it directly on the Plugin object:\r\n\r\n```\r\n$.pluginName.methodName = function( [ argument, … ] ) {\r\n  // instructions\r\n};\r\n```\r\n\r\n###Calling\r\nStatic public method are called like any javascript method:\r\n\r\n```\r\n$.pluginName.methodName( [ argument, … ] );\r\n```\r\n\r\n### Predefined methods\r\n+ **name**(): returns the plugin name\r\n+ **local**( string ): returns a string prefixed with '*pluginName*-'\r\n+ **space**( string ): returns a string suffixed with '.easyPlug-*pluginName*'","google":"UA-16058988-5"}