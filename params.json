{"name":"Jquery.easyplug","tagline":"Simplify jQuery plugin authoring","body":"# What is easyPlug?\r\n\r\nEasyPlug simplify jQuery plugin authoring.\r\n\r\nPlugin creation only requires a definition object described below. **All jQuery related stuff is done for you**.\r\n\r\nWhile it's quicker to edit it pushes conventions over all *easyPlugged* plugins.\r\n\r\n# How it works?\r\n\r\nTo create your plugin, all you have to do is passing to easyPlug a **definition object** like this one:\r\n\r\n```\r\n// Return your plugin class\r\nPlugin = $.easyPlug({\r\n  name:      'example',\r\n  construct: function () {}\r\n});\r\n```\r\n\r\n## Definition object\r\n\r\nDefinition object does not require any member.\r\n\r\n### construct *<small>(function)</small>*\r\n\r\nA function called each time the plugin is instanciate for an element.\r\n\r\n### events *<small>(array)</small>*\r\n\r\nA list of custom events. Each event name will be prefixed and added to the events member of the Plugin:\r\n\r\n```\r\n$.easyPlug({\r\n  name:   'example'\r\n  events: ['foo']\r\n});\r\n\r\n// 'easyPlug__example-foo'\r\n$.example.events.foo;\r\n```\r\n\r\n### init *<small>(function)</small>*\r\n\r\nA function called when instanciating the Plugin for the first time.\r\n\r\n### invoke *<small>(function)</small>*\r\n\r\nA function called when invoking inaccessible methods:\r\n\r\n```\r\n$.easyPlug({\r\n  invoke: function (name, args) {}\r\n});\r\n```\r\n\r\n### name *<small>(string)</small>*\r\n\r\nThe name of your plugin.\r\n\r\n```\r\n$.easyPlug({name: 'example'});\r\n\r\n// Plugin class\r\n$.example;\r\n\r\n// Plugin instance\r\n$('.some-elements').example();\r\n```\r\n\r\n### presets *<small>(object)</small>*\r\n\r\nProperties used by the plugin. Each plugin instance get an object combining presets and options passed by the user on instanciation:\r\n\r\n```\r\n// $.extend({}, presets, options)\r\nthis.settings;\r\n```\r\n\r\n### prototype *<small>(object)</small>*\r\n\r\nThe prototype of your Plugin. Each method of the prototype could be called like thid:\r\n\r\n```\r\n$('.some-elements').example('methodName', arg1, arg2);\r\n```\r\n\r\n\r\n## Plugin methods\r\n\r\nEasyPlug defines \"static\" methods to each Plugin it generates.\r\n\r\n### addPrefix(stringToPrefix)\r\n\r\nAdd a prefix uniq to the Plugin to any word in the string. It's this function which prefixes custom events.\r\n\r\n```\r\n// 'easyPlug__example-foo easyPlug__example-bar'\r\n$.example.addPrefix('foo bar');\r\n```\r\n\r\n### addNamespace(stringToNamespace[, local])\r\n\r\nAdd a namespace uniq to the Plugin to any word in the string. Use this when binding, setting/getting data,â€¦ in your plugin.\r\n\r\n```\r\n// 'foo.easyPlug__example bar.easyPlug__example'\r\n$.example.addNamespace('foo bar');\r\n\r\n// 'foo.easyPlug__example.myNS bar.easyPlug__example.myNS'\r\n$.inlineput.addNamespace('foo bar', 'myNS');\r\n```\r\n\r\n### getName()\r\n\r\nReturn the name of the plugin.\r\n\r\n```\r\n// 'example'\r\n$.example.getName();\r\n```\r\n\r\n## easyPlug methods\r\n\r\n### isPluggedTo(element, plugin)\r\n\r\nTell if the element was plugged by a particular plugin:\r\n\r\n```\r\n// false\r\n$.easyPlug.isPluggedTo($('#single-element'), 'example');\r\n\r\n// Here, element could be in a larger collection\r\n$('#single-element').example();\r\n\r\n// true\r\n$.easyPlug.isPluggedTo($('#single-element'), 'example');\r\n```\r\n\r\n### getInstance(element, plugin)\r\n\r\nReturn the plugin instance of an element if exists:\r\n\r\n```\r\n// undefined\r\n$.easyPlug.getInstance($('#single-element'), 'example');\r\n\r\n// Here, element could be in a larger collection\r\n$('#single-element').example();\r\n\r\n// Return the plugin instance\r\n$.easyPlug.getInstance($('#single-element'), 'example');\r\n```","google":"UA-16058988-5","note":"Don't delete this file! It's used internally to help with page regeneration."}